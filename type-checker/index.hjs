import { JsigType, JsigProgramNode } from "../ast/index.hjs"
import { HeaderFile } from "./header-file.hjs"
import { JSNode } from "../_types/definitions/esprima.hjs"
import { ProgramMeta, TraceInfo } from "./meta.hjs"
import { GlobalScope } from "./scope.hjs"

interface DefinitionToken {
    type: String,
    defn: JsigType
}

interface TypeChecker {
    entryFiles: Array<String>,
    files: Object<String, String>,
    basedir: String,

    globalScope: GlobalScope,
    metas: Object<String, ProgramMeta>,
    headerFiles: Object<String, HeaderFile>,

    definitions: Object<String, DefinitionToken>,

    definitionsFolder: String | null,
    globalsFile: String | null,
    optin: Boolean,
    fullInference: Boolean,
    previousChecker: TypeChecker | null,
    errorLineContext: Number,

    errors: Array<Error>,
    typeofErrors: Array<Error>,
    traces: Array<TraceInfo>,
    moduleExportsType: JsigType | null,
    currentMeta: ProgramMeta | null,

    errorType: JsigType | null,

    checkProgram() => void,
    loadLanguageIdentifiers() => void,
    preloadDefinitions() => void,
    preloadGlobals() => void,
    getOrCreateMeta(file: String, opts: {
        loose: Boolean
    }) => ProgramMeta | null,
    getOrCreateHeaderFile(
        file: String,
        node?: JSNode,
        importSourceText?: String,
        importFileName?: String
    ) => HeaderFile | null,
    addError(err: Error) => void,
    addTypeofError(err: Error) => void,
    _createHeaderFile(
        source: String, fileName: String
    ) => HeaderFile | null,
    _readAndParseHeaderFile(
        source: String, fileName: String
    ) => JsigProgramNode | null,
    _addDefinition(id: String, typeDefn: JsigType) => DefinitionToken,
    serializeType(type: JsigType, opts: Object) => void,
    addTrace(trace: TraceInfo) => void,
    countErrors() => Number,
    countTypeofErrors() => Number,
    getErrors() => Array<Error>,
    getTypeofErrors() => Array<Error>,
    setErrors(Array<Error>) => void,
    prettyPrintAllErrors(count?: Number) => void,
    prettyPrintErrorStatement(err: Error) => void,
    prettyPrintAllErrorsWithTrace(count?: Number) => void,
    prettyPrintTraces() => void,
    loadJavaScriptIntoIndexTable(indexTable: Object<String, JsigType>) => void,
    tryReadHeaderFile(fileName: String) => Boolean,
    getDefinition(id: String) => DefinitionToken,
    getDefinitionFilePath(packageName: String) => String | null
}

type TypeCheckerOpts : {
    files?: Object<String, String>,
    definitions?: String,
    globalsFile?: String,
    optin?: Boolean,
    fullInference?: Boolean,
    context?: Number,
    previousChecker?: TypeChecker
}

TypeChecker : {
    compile: (fileName: String, options: TypeCheckerOpts) => TypeChecker
} & (
    this: TypeChecker, entryFile: String | Array<String>, options: TypeCheckerOpts
) => void

tryEsprimaParse : (source: String) => (
    [Error & {
        lineNumber: Number,
        description: String,
        index: Number
    }, null] |
    [null, JSNode]
)
