import { JsigType } from "./index.hjs"
import { JsigLiteralTypeNode } from "./literal.hjs"
import { JsigGenericLiteralNode } from "./generic.hjs"
import { JsigLocationLiteralNode } from "./location-literal.hjs"


interface JsigTypeDeclarationNode {
    type: "typeDeclaration",
    identifier: String,
    typeExpression: JsigType,
    _raw: JsigTypeDeclarationNode | null,
    generics: Array<JsigLiteralTypeNode>,
    seenGenerics: Array<JsigLocationLiteralNode>,

    _markGenerics(
        generics: Array<JsigLiteralTypeNode>
    ) => Array<JsigLocationLiteralNode>
}

TypeDeclarationNode : (
    this: JsigTypeDeclarationNode,
    identifier: String,
    expr: JsigType,
    generics: Array<JsigLiteralTypeNode>
) => void

interface GenericReplacer {
    node: JsigTypeDeclarationNode,
    knownGenerics: Array<String>,
    genericUUIDs: Object<String, String>,
    seenGenerics: Array<JsigLocationLiteralNode>,

    replace(
        ast: JsigLiteralTypeNode | JsigGenericLiteralNode,
        raw: JsigLiteralTypeNode | JsigGenericLiteralNode,
        stack: Array<String | Number>
    ) => JsigLiteralTypeNode | JsigGenericLiteralNode,
    replaceTypeLiteral(
        ast: JsigLiteralTypeNode,
        stack: Array<String | Number>
    ) => JsigLiteralTypeNode
}

GenericReplacer : (
    this: GenericReplacer,
    node: JsigTypeDeclarationNode,
    genericNames: Array<String>
) => void
