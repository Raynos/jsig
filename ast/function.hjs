import { JsigLiteralTypeNode } from "./literal.hjs"
import { JsigGenericLiteralNode } from "./generic.hjs"
import { JsigLocationLiteralNode } from "./location-literal.hjs"
import { JsigFunctionParameterNode } from "./function-parameter.hjs"
import { JsigType } from "./index.hjs"

interface JsigFunctionNode {
    type: "function',
    args: Array<JsigFunctionParameterNode>,
    result: JsigType,
    thisArg: JsigFunctionParameterNode | null,
    brand: String,
    specialKind: String | null,
    _raw: JsigFunctionNode | null,
    generics: Array<JsigLocationLiteralNode>,

    _findGenerics(
        generics: Array<String>
    ) => Array<JsigLocationLiteralNode>
}

FunctionNode : (this: JsigFunctionNode, opts: {
    label?: String,
    optional?: Boolean,
    result: JsigType,
    args?: Array<JsigFunctionParameterNode>,
    thisArg?: JsigFunctionParameterNode,
    brand?: String,
    specialKind?: String,
    generics?: Array<String>
}) => void

interface GenericReplacer {
    node: JsigFunctionNode,
    knownGenerics: Array<String>,
    genericUUIDs: Object<String, String>,
    seenGenerics: Array<JsigLocationLiteralNode>,

    replace(
        ast: JsigLiteralTypeNode | JsigGenericLiteralNode,
        raw: JsigLiteralTypeNode | JsigGenericLiteralNode,
        stack: Array<String | Number>
    ) => JsigLiteralTypeNode | JsigGenericLiteralNode,
    replaceTypeLiteral(
        ast: JsigLiteralTypeNode,
        stack: Array<String | Number>
    ) => JsigLiteralTypeNode
}

GenericReplacer : (
    this: GenericReplacer,
    node: JsigFunctionNode,
    generics: Array<String>
) => void
